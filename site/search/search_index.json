{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"test","title":"About"},{"location":"about/#test","text":"","title":"test"},{"location":"direnv/","text":"Direnv If you\u2019re bouncing between multiple AWS accounts or credentials in your CLI, this tool might be a huge quality of life perk for you. Basically, direnv can load and unload environment variables depending on the current directory you\u2019re in. In this post I\u2019ll show how to use it to switch between AWS credentials. Let\u2019s start with a real world example right of the bat: ~/playground master* \u276f ls -l total 20 drwxr-xr-x 2 dbei dbei 4096 Apr 21 09 :37 project1 drwxr-xr-x 2 dbei dbei 4096 Apr 21 09 :37 project2 ~/playground master* Project1 will use AWS Account #1 Project2 will use AWS Account #2 Let\u2019s start with Project1: Setup direnv . cd into your desired directory. In my case it would be project1 . Create .envrc : vi .envrc Add your AWS credentials which you can generate in IAM: export AWS_ACCESS_KEY_ID=AKIAZXIDSFDSNTLBJWC export AWS_DEFAULT_REGION=eu-west-1 export AWS_SECRET_ACCESS_KEY=KJuja33rTxIlK/wee/DsdrdhjKKg/HDrmtreDJ cd in and out of that directory. You should see an error: Error direnv: error /playground/project1/.envrc is blocked. Run direnv allow to approve its content Type direnv allow and you should be good: ~/playground/project1 master* \u276f direnv allow direnv: loading ~/playground/project1/.envrc direnv: export ~AWS_DEFAULT_REGION You can test that it works with any AWS CLI command. For example: ~/playground/project1 master* \u276f aws s3 ls 2022 -03-22 16 :35:07 daniel-awesome-bucket 2022 -04-21 09 :18:52 do -not-delete-gatedgarden-audit-384466123559 ~/playground/project1 master* \u276f Repeat the same process for Project2 and use different credentials. After that, you should be set. From here you can move between folders, which will automatically move between your AWS credentials and accounts! Tip Don\u2019t forget to add .envrc to your .gitignore !","title":"Switch Between AWS Credentials With Direnv"},{"location":"direnv/#direnv","text":"If you\u2019re bouncing between multiple AWS accounts or credentials in your CLI, this tool might be a huge quality of life perk for you. Basically, direnv can load and unload environment variables depending on the current directory you\u2019re in. In this post I\u2019ll show how to use it to switch between AWS credentials. Let\u2019s start with a real world example right of the bat: ~/playground master* \u276f ls -l total 20 drwxr-xr-x 2 dbei dbei 4096 Apr 21 09 :37 project1 drwxr-xr-x 2 dbei dbei 4096 Apr 21 09 :37 project2 ~/playground master* Project1 will use AWS Account #1 Project2 will use AWS Account #2 Let\u2019s start with Project1: Setup direnv . cd into your desired directory. In my case it would be project1 . Create .envrc : vi .envrc Add your AWS credentials which you can generate in IAM: export AWS_ACCESS_KEY_ID=AKIAZXIDSFDSNTLBJWC export AWS_DEFAULT_REGION=eu-west-1 export AWS_SECRET_ACCESS_KEY=KJuja33rTxIlK/wee/DsdrdhjKKg/HDrmtreDJ cd in and out of that directory. You should see an error: Error direnv: error /playground/project1/.envrc is blocked. Run direnv allow to approve its content Type direnv allow and you should be good: ~/playground/project1 master* \u276f direnv allow direnv: loading ~/playground/project1/.envrc direnv: export ~AWS_DEFAULT_REGION You can test that it works with any AWS CLI command. For example: ~/playground/project1 master* \u276f aws s3 ls 2022 -03-22 16 :35:07 daniel-awesome-bucket 2022 -04-21 09 :18:52 do -not-delete-gatedgarden-audit-384466123559 ~/playground/project1 master* \u276f Repeat the same process for Project2 and use different credentials. After that, you should be set. From here you can move between folders, which will automatically move between your AWS credentials and accounts! Tip Don\u2019t forget to add .envrc to your .gitignore !","title":"Direnv"},{"location":"ssm-patch-group/","text":"Recently I needed to add multiple instances to a Patch Group. - This is done by adding a tag to each instances where the key is Patch Group and the value is a name of your choice. If you use AWS\u2019s SSM service, you know that through the Console you are only able to add one tag at a time. This short script will show you how to tag multiple instances at once. Before that, we need to differentiate between EC2 instances and SSM Managed Instances. EC2 Instance \u2013 a regular EC2 instance. Represented by an instance ID that starts with i- Managed Instance \u2013 An on-premise or non EC2 managed instance that you can manage in SSM. Represented by and instance ID that starts with mi- Before you start, make sure you have 2 things: Boto3 installed The appropriate IAM permissions (use aws configure to set your test environment) I want to add all of my Amazon Linux 2 machines to their own Patch Group. In my example, I only add the tags to EC2 instances, but the same logic applies to managed instances as well. import boto3 ssm_client = boto3 . client ( 'ssm' ) ec2_client = boto3 . client ( 'ec2' ) tags = { 'Key' : 'Patch Group' , 'Value' : 'AL2-Test' } all_instances = [] for instance in ssm_client . describe_instance_information ()[ 'InstanceInformationList' ]: if instance [ 'PlatformName' ] == 'Amazon Linux' and instance [ 'PlatformVersion' ] == '2' : all_instances . append ( instance [ 'InstanceId' ]) for instance in all_instances : ec2_client . create_tags ( # DryRun=True, Resources = [ instance ], Tags = [ tags ] ) You can choose whatever tags you want for your key/value tags = { 'Key' : 'Patch Group' , 'Value' : 'AL2-Test' } You can also use more tags. The first loop iterates over all of the instances in SSM, and if the instance\u2019s OS is Amazon Linux 2, it gets added to a list of instances. The second loop goes over the list of instances we just filled and simply creates the tags we configured. As you can see, by running we get our desired result:","title":"Add Multiple Instances To a Patch Group in SSM"}]}